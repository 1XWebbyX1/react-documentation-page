{"version":3,"sources":["components/articles/article08.jsx"],"names":["Jsx","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","id","class","React","Component"],"mappings":"uJAGMA,mLAEF,OACEC,EAAAC,EAAAC,cAAA,WAASC,GAAG,YAAYC,MAAM,gBAChCJ,EAAAC,EAAAC,cAAA,UAAQE,MAAM,WAAd,aAGAJ,EAAAC,EAAAC,cAAA,eACAF,EAAAC,EAAAC,cAAA,mRAEAF,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,kJAEAF,EAAAC,EAAAC,cAAA,mLAEAF,EAAAC,EAAAC,cAAA,uHAEAF,EAAAC,EAAAC,cAAA,oMAVA,yGAoBAF,EAAAC,EAAAC,cAAA,8FA3BcG,IAAMC,WAmCTP","file":"static/js/9.5c7db470.chunk.js","sourcesContent":["import React from 'react'\n\n\nclass Jsx extends React.Component{\n  render(){\n    return(\n      <section id=\"Constants\" class=\"main-section\">\n    <header class=\"header9\">Constants</header>\n\n\n    <article>\n    <p>You can create a read-only, named constant with the const keyword. The syntax of a constant identifier is the same as for a variable identifier: it must start with a letter, underscore or dollar sign and can contain alphabetic, numeric, or underscore characters.</p>\n\n    <code>{`const PI = 3.14;`}</code>\n    <p>A constant cannot change value through assignment or be re-declared while the script is running. It has to be initialized to a value.</p>\n\n    <p>The scope rules for constants are the same as those for let block scope variables. If the const keyword is omitted, the identifier is assumed to represent a variable.</p>\n\n    <p>You cannot declare a constant with the same name as a function or variable in the same scope. For example:</p>\n\n    <code>{`// THIS WILL CAUSE AN ERROR\n    function f() {};\n    const f = 5;\n    // THIS WILL CAUSE AN ERROR ALSO\n    function f() {\n    const g = 5;\n    var g;\n    //statements\n    }`}</code>\n    However, object attributes are not protected, so the following statement is executed without problems.\n    <code>{`const MY_OBJECT = {\"key\": \"value\"};\n    MY_OBJECT.key = \"otherValue\"`}</code>\n    </article>\n    </section>\n    );\n  }\n}\n\nexport default Jsx;\n"],"sourceRoot":""}