{"version":3,"sources":["components/articles/article06.jsx"],"names":["Jsx","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","id","class","React","Component"],"mappings":"uJAGMA,mLAEF,OACEC,EAAAC,EAAAC,cAAA,WAASC,GAAG,iBAAiBC,MAAM,gBACrCJ,EAAAC,EAAAC,cAAA,UAAQE,MAAM,WAAd,kBAEAJ,EAAAC,EAAAC,cAAA,eACAF,EAAAC,EAAAC,cAAA,sSAEAF,EAAAC,EAAAC,cAAA,gYACAF,EAAAC,EAAAC,cAAA,6EAIAF,EAAAC,EAAAC,cAAA,iGAEAF,EAAAC,EAAAC,cAAA,yHAhBcG,IAAMC,WA2BTP","file":"static/js/7.2f1aa013.chunk.js","sourcesContent":["import React from 'react'\n\n\nclass Jsx extends React.Component{\n  render(){\n    return(\n      <section id=\"Variable_scope\" class=\"main-section\">\n    <header class=\"header7\">Variable scope</header>\n\n    <article>\n    <p> When you declare a variable outside of any function, it is called a global variable, because it is available to any other code in the current document. When you declare a variable within a function, it is called a local variable, because it is available only within that function.</p>\n\n    <p>JavaScript before ECMAScript 2015 does not have block statement scope; rather, a variable declared within a block is local to the function (or global scope) that the block resides within. For example the following code will log 5, because the scope of x is the function (or global context) within which x is declared, not the block, which in this case is an if statement.</p>\n    <code>{`if (true) {\n    var x = 5;\n    }\n    console.log(x);  // 5`}</code>\n    <p>This behavior changes, when using the let declaration introduced in ECMAScript 2015.</p>\n\n    <code>{`if (true) {\n    let y = 5;\n    }\n    console.log(y);\n    // ReferenceError: y is not defined`}</code>\n    </article>\n    </section>\n    );\n  }\n}\n\nexport default Jsx;\n"],"sourceRoot":""}