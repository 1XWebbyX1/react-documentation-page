(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{42:function(e,t,n){"use strict";n.r(t);var a=n(3),s=n(4),i=n(6),o=n(5),l=n(7),c=n(0),u=n.n(c),m=function(e){function t(){return Object(a.a)(this,t),Object(i.a)(this,Object(o.a)(t).apply(this,arguments))}return Object(l.a)(t,e),Object(s.a)(t,[{key:"render",value:function(){return u.a.createElement("section",{id:"if-else_statement",class:"main-section"},u.a.createElement("header",{class:"header11"},"if...else statement"),u.a.createElement("article",null,"Use the if statement to execute a statement if a logical condition is true. Use the optional else clause to execute a statement if the condition is false. An if statement looks as follows:",u.a.createElement("code",null,"if (condition) {\n    statement_1;\n    } else {\n    statement_2;\n    }"),"condition can be any expression that evaluates to true or false. See Boolean for an explanation of what evaluates to true and false. If condition evaluates to true, statement_1 is executed; otherwise, statement_2 is executed. statement_1 and statement_2 can be any statement, including further nested if statements.",u.a.createElement("p",null,"You may also compound the statements using else if to have multiple conditions tested in sequence, as follows:"),u.a.createElement("code",null,"if (condition_1) {\n    statement_1;\n    } else if (condition_2) {\n    statement_2;\n    } else if (condition_n) {\n    statement_n;\n    } else {\n    statement_last;\n    } "),"In the case of multiple conditions only the first logical condition which evaluates to true will be executed. To execute multiple statements, group them within a block statement (","{ ... }","') . In general, it's good practice to always use block statements, especially when nesting if statements:",u.a.createElement("code",null,"if (condition) {\n    statement_1_runs_if_condition_is_true;\n    statement_2_runs_if_condition_is_true;\n    } else {\n    statement_3_runs_if_condition_is_false;\n    statement_4_runs_if_condition_is_false;\n    }"),"It is advisable to not use simple assignments in a conditional expression, because the assignment can be confused with equality when glancing over the code. For example, do not use the following code:",u.a.createElement("code",null,"if (x = y) {\n    /* statements here */\n    }"),"If you need to use an assignment in a conditional expression, a common practice is to put additional parentheses around the assignment. For example:",u.a.createElement("code",null,"if ((x = y)) {\n    /* statements here */\n    }")))}}]),t}(u.a.Component);t.default=m}}]);
//# sourceMappingURL=11.9b7ceb03.chunk.js.map