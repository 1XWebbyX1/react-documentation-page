(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{38:function(e,a,t){"use strict";t.r(a);var n=t(3),i=t(4),l=t(6),c=t(5),o=t(7),r=t(0),s=t.n(r),h=function(e){function a(){return Object(n.a)(this,a),Object(l.a)(this,Object(c.a)(a).apply(this,arguments))}return Object(o.a)(a,e),Object(i.a)(a,[{key:"render",value:function(){return s.a.createElement("section",{id:"Variable_scope",class:"main-section"},s.a.createElement("header",{class:"header7"},"Variable scope"),s.a.createElement("article",null,s.a.createElement("p",null," When you declare a variable outside of any function, it is called a global variable, because it is available to any other code in the current document. When you declare a variable within a function, it is called a local variable, because it is available only within that function."),s.a.createElement("p",null,"JavaScript before ECMAScript 2015 does not have block statement scope; rather, a variable declared within a block is local to the function (or global scope) that the block resides within. For example the following code will log 5, because the scope of x is the function (or global context) within which x is declared, not the block, which in this case is an if statement."),s.a.createElement("code",null,"if (true) {\n    var x = 5;\n    }\n    console.log(x);  // 5"),s.a.createElement("p",null,"This behavior changes, when using the let declaration introduced in ECMAScript 2015."),s.a.createElement("code",null,"if (true) {\n    let y = 5;\n    }\n    console.log(y);\n    // ReferenceError: y is not defined")))}}]),a}(s.a.Component);a.default=h}}]);
//# sourceMappingURL=7.f97040f9.chunk.js.map